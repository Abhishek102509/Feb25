<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>

    <script>
        // sum-1, factorial->3, square -> 2

        // sum 2 3 -> factorial(sum result) -> square(fact result)
        // console.log("calculating sum....");
        // setTimeout(() => {
        //     var x = 2;
        //     var y = 3;
        //     var z = x + y;
        //     console.log("sum is ", z);
        //     console.log("calculating factorial...");
        //     setTimeout(() => {
        //         var f = 1;
        //         for (var i = 1; i <= z; i++) {
        //             f = f * i;
        //         }
        //         console.log("factorial is", f);
        //         console.log("calculating square...");
        //         setTimeout(() => {
        //             var sq = f * f;
        //             console.log("square is ", sq);
        //         }, 2000);
        //     }, 3000);
        // }, 1000);

        function sum(a, b) {
            return new Promise((resolve, reject) => {
                console.log("calculating sum...");
                setTimeout(()=>{
                    var c = a + b;
                    if(c){
                        resolve(c);
                    }
                    else{
                        reject("Error: something went wrong in sum");
                    }
                },1000);
            });
        }

        function factorial(num){
            return new Promise((resolve,reject)=>{
                console.log("calculating factorial...");
                setTimeout(() => {
                    var f=1;
                    for(var i=1;i<=num;i++){
                        f=f*i;
                    }
                    if(f){
                        resolve(f);
                    }
                    else{
                        reject("Error: cannot find factorial");
                    }
                }, 3000);
            });
        }

        function square(n){
            return new Promise((resolve,reject)=>{
                console.log("calculating square...");
                setTimeout(() => {
                    var sq=n*n;
                    
                    if(sq){
                        resolve(sq);
                    }
                    else{
                        reject("Error: cannot find square");
                    }
                }, 2000);
            });
        }

        sum(2,3)
        .then((result)=>{
            console.log("sum is ",result);
            var obj = factorial(result);
            return obj;
        })
        .then((factResult)=>{
            console.log("factorial is",factResult);
            var sqPromise = square(factResult);
            return sqPromise;
        })
        .then((sqResult)=>{
            console.log("square is",sqResult);
        })
        .catch((error)=>{
            console.log(error);
        });





    </script>
</body>

</html>


        function fetchIds(){
            return new Promise((resolve,reject)=>{
                console.log("fetching ids...");
                setTimeout(() => {
                    var ids = [167,124,181,101]
                    if(ids){
                        resolve(ids);
                    }
                    else{
                        reject("Error: cannot find square");
                    }
                }, 2000);
            });
        }
        function fetchData(id){
            return new Promise((resolve,reject)=>{
                console.log("fetching data for...",id);
                setTimeout(() => {
                    var userData={userId:id,name:"Aman",phone:"87777111",age:23};
                    
                    if(userData){
                        resolve(userData);
                    }
                    else{
                        reject("Error: cannot find data");
                    }
                }, 1000);
            });
        }

        function checkEligibility(age){
            return new Promise((resolve,reject)=>{
                console.log("checking age...");
                setTimeout(() => {
                    if(age>=18){
                        resolve("User is eligible");
                    }
                    else{
                        reject("Error: tu to baccha hai..!");
                    }
                }, 1000);
            });
        }

        fetchIds()
        .then((idResult)=>{
            console.log("ids are",idResult);
            return fetchData(idResult[1]);
        }).
        then((dataResult)=>{
            console.log(dataResult);
            return checkEligibility(dataResult.age);
        })
        .then((msg)=>{
            console.log(msg);
        })
        .catch((error)=>{
            console.log(error);
        });

Here in JS we have two ways to handle the promise:

1. then & catch functions
2. async & await keywords

await: when a function call is returning a promise then we can apply await keyword onto that call

await keyword handles the promise, and it will make rest of the statement wait for the current promise task to be executed completely then only rest of the code will continue

var obj = await sum(2,3); // obj will be having now sum result i.e. 5
var rs = await fetchIds();

if await keyword is there then that expression will return the value which has been passed into the resolve argument while defining the promise


try{
	var obj = await sum(2,3); // obj will be having now sum result i.e. 5
var rs = await fetchIds();

}
catch(error){


}

if any function is returning a promise then onto its signature we can apply async keyword and if any function is containing await in the definition then async keyword must be applied on the signature

















